#!/usr/bin/env python

# === Setup ===
# Your package name
PACKAGE = "ros_workshop"
# Import dependencies and create a generator instance
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()

# === Generator Arguments ===
# name, paramtype (Any of int_t, double_t, str_t, or bool_t)
# level, description, default, min, max
# Linear goals
gen.add("x_goal",   double_t,   0,  "Cartesian X Goal Position",    0.72, -1,  1)
gen.add("y_goal",   double_t,   0,  "Cartesian Y Goal Position",   -0.08, -1,  1)
gen.add("z_goal",   double_t,   0,  "Cartesian Z Goal Position",    0.40, -1,  1)

# Angular Goals
gen.add("ax_goal",   double_t,   0,  "Angular X Goal Position",    0.72, -1,  1)
gen.add("ay_goal",   double_t,   0,  "Angular Y Goal Position",    0.64, -1,  1)
gen.add("az_goal",   double_t,   0,  "Angular Z Goal Position",    0.0, -1,  1)

# Examples of other parameter types
# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

# Enums: Good for enforcing certain types/inputs
# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")
# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

# === Generate Arguments ===
# package name, node name, name prefix
exit(gen.generate(PACKAGE, "ros_workshop", "Workshop"))